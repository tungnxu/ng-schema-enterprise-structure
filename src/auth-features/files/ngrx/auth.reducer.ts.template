import { createReducer, on } from '@ngrx/store';
import * as AuthActions from './auth.actions';
import { User } from '../auth.service';

export interface AuthState {
  user: User | null;
  loading: boolean;
  error: any | null;
}

export const initialAuthState: AuthState = {
  user: null,
  loading: false,
  error: null
};

export const authReducer = createReducer(
  initialAuthState,
  
  on(AuthActions.login, (state) => ({
    ...state,
    loading: true,
    error: null
  })),
  
  on(AuthActions.loginSuccess, (state, { user }) => ({
    ...state,
    user,
    loading: false,
    error: null
  })),
  
  on(AuthActions.loginFailure, (state, { error }) => ({
    ...state,
    user: null,
    loading: false,
    error
  })),
  
  on(AuthActions.logout, () => ({
    ...initialAuthState
  })),
  
  on(AuthActions.checkAuth, (state) => ({
    ...state,
    loading: true,
    error: null
  })),
  
  on(AuthActions.authSuccess, (state, { user }) => ({
    ...state,
    user,
    loading: false,
    error: null
  })),
  
  on(AuthActions.authFailure, (state) => ({
    ...state,
    user: null,
    loading: false,
    error: null
  }))
);