import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { BehaviorSubject, Observable, of } from 'rxjs';
import { map, catchError, tap } from 'rxjs/operators';
import { Router } from '@angular/router';

export interface User {
  id: string;
  email: string;
  name: string;
  token: string;
}

export interface LoginRequest {
  email: string;
  password: string;
}

export interface LoginResponse {
  user: User;
  token: string;
}

@Injectable({
  providedIn: 'root'
})
export class AuthService {
  private currentUserSubject = new BehaviorSubject<User | null>(null);
  public currentUser$ = this.currentUserSubject.asObservable();

  constructor(
    private http: HttpClient,
    private router: Router
  ) {
    // Khôi phục user từ localStorage khi khởi động
    this.checkStoredAuth();
  }

  private checkStoredAuth(): void {
    const storedUser = localStorage.getItem('currentUser');
    if (storedUser) {
      try {
        const user: User = JSON.parse(storedUser);
        this.currentUserSubject.next(user);
      } catch (error) {
        console.error('Lỗi phân tích user từ localStorage:', error);
        this.logout(); // Xóa dữ liệu không hợp lệ
      }
    }
  }

  login(loginRequest: LoginRequest): Observable<User> {
    return this.http.post<LoginResponse>('/api/auth/login', loginRequest)
      .pipe(
        map(response => {
          const user = response.user;
          // Lưu token vào localStorage
          localStorage.setItem('auth_token', response.token);
          localStorage.setItem('currentUser', JSON.stringify(user));
          this.currentUserSubject.next(user);
          return user;
        }),
        catchError(error => {
          console.error('Đăng nhập thất bại:', error);
          return of(null as unknown as User);
        })
      );
  }

  logout(): void {
    // Xóa user từ local storage
    localStorage.removeItem('currentUser');
    localStorage.removeItem('auth_token');
    // Cập nhật BehaviorSubject
    this.currentUserSubject.next(null);
    // Chuyển hướng về trang đăng nhập
    this.router.navigate(['/login']);
  }

  getToken(): string | null {
    return localStorage.getItem('auth_token');
  }

  isLoggedIn(): boolean {
    return this.currentUserSubject.value !== null;
  }

  getCurrentUser(): User | null {
    return this.currentUserSubject.value;
  }
}